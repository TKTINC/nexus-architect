apiVersion: v1
kind: Namespace
metadata:
  name: nexus-compliance
  labels:
    name: nexus-compliance
    app.kubernetes.io/name: nexus-architect
    app.kubernetes.io/component: compliance
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gdpr-compliance-config
  namespace: nexus-compliance
data:
  gdpr-policy.yaml: |
    # GDPR Compliance Policy for Nexus Architect
    gdpr:
      # Data Subject Rights Implementation
      data_subject_rights:
        # Right of Access (Article 15)
        access:
          enabled: true
          response_time: "30 days"
          automated: true
          verification_required: true
          data_sources:
            - user_profiles
            - conversation_history
            - audit_logs
            - system_logs
          
        # Right to Rectification (Article 16)
        rectification:
          enabled: true
          response_time: "30 days"
          automated: false
          verification_required: true
          approval_workflow: true
          
        # Right to Erasure (Article 17)
        erasure:
          enabled: true
          response_time: "30 days"
          automated: false
          verification_required: true
          approval_workflow: true
          exceptions:
            - legal_obligations
            - public_interest
            - legitimate_interests
          
        # Right to Data Portability (Article 20)
        portability:
          enabled: true
          response_time: "30 days"
          formats:
            - json
            - csv
            - xml
          verification_required: true
          
        # Right to Object (Article 21)
        objection:
          enabled: true
          response_time: "30 days"
          automated: false
          verification_required: true
          
        # Rights related to Automated Decision Making (Article 22)
        automated_decision_making:
          enabled: true
          human_intervention: true
          explanation_required: true
          opt_out_available: true
      
      # Data Processing Principles (Article 5)
      processing_principles:
        lawfulness:
          legal_basis:
            - consent
            - contract
            - legal_obligation
            - vital_interests
            - public_task
            - legitimate_interests
          documentation_required: true
          
        fairness:
          transparency_required: true
          clear_information: true
          no_deception: true
          
        transparency:
          privacy_notice: true
          clear_language: true
          accessible_format: true
          
        purpose_limitation:
          specific_purposes: true
          explicit_purposes: true
          legitimate_purposes: true
          compatible_use_only: true
          
        data_minimisation:
          adequate_data_only: true
          relevant_data_only: true
          limited_to_purpose: true
          
        accuracy:
          up_to_date: true
          correction_mechanisms: true
          deletion_of_inaccurate: true
          
        storage_limitation:
          retention_periods: true
          automatic_deletion: true
          anonymization: true
          
        integrity_confidentiality:
          security_measures: true
          encryption: true
          access_controls: true
          
        accountability:
          compliance_demonstration: true
          documentation: true
          regular_reviews: true
      
      # Data Protection by Design and Default (Article 25)
      privacy_by_design:
        technical_measures:
          - encryption_at_rest
          - encryption_in_transit
          - pseudonymization
          - anonymization
          - access_controls
          - audit_logging
          
        organizational_measures:
          - privacy_policies
          - staff_training
          - regular_assessments
          - incident_response
          - vendor_management
          
        default_settings:
          minimal_data_processing: true
          opt_in_consent: true
          privacy_friendly_defaults: true
      
      # Data Protection Impact Assessment (Article 35)
      dpia:
        required_scenarios:
          - systematic_monitoring
          - large_scale_special_categories
          - large_scale_public_areas
          - new_technologies
          - automated_decision_making
          
        assessment_criteria:
          - necessity_proportionality
          - risks_to_rights_freedoms
          - measures_to_address_risks
          - safeguards_security_measures
          
        consultation_required:
          - data_subjects
          - supervisory_authority
          - data_protection_officer
      
      # Breach Notification (Articles 33-34)
      breach_notification:
        supervisory_authority:
          timeframe: "72 hours"
          automated: true
          required_information:
            - nature_of_breach
            - categories_individuals
            - approximate_numbers
            - consequences
            - measures_taken
            
        data_subjects:
          timeframe: "without undue delay"
          high_risk_only: true
          clear_language: true
          required_information:
            - nature_of_breach
            - contact_point
            - consequences
            - measures_taken
      
      # Records of Processing (Article 30)
      records_of_processing:
        controller_records:
          - name_contact_details
          - purposes_of_processing
          - categories_of_data_subjects
          - categories_of_personal_data
          - categories_of_recipients
          - transfers_third_countries
          - retention_periods
          - security_measures
          
        processor_records:
          - name_contact_details
          - categories_of_processing
          - transfers_third_countries
          - security_measures
        
        maintenance:
          automated: true
          regular_updates: true
          available_on_request: true
  
  data-classification.yaml: |
    # Data Classification Schema for GDPR Compliance
    data_classification:
      # Personal Data Categories
      personal_data:
        basic_personal_data:
          - name
          - email
          - phone_number
          - address
          - date_of_birth
          - employee_id
          - username
          
        special_categories:
          - racial_ethnic_origin
          - political_opinions
          - religious_beliefs
          - trade_union_membership
          - genetic_data
          - biometric_data
          - health_data
          - sex_life_orientation
          
        criminal_data:
          - criminal_convictions
          - criminal_offences
          - security_measures
      
      # Data Processing Categories
      processing_categories:
        collection:
          lawful_basis_required: true
          consent_mechanisms:
            - explicit_consent
            - opt_in_checkboxes
            - granular_consent
            
        storage:
          encryption_required: true
          access_controls: true
          retention_policies: true
          
        processing:
          purpose_limitation: true
          data_minimization: true
          accuracy_requirements: true
          
        sharing:
          legal_basis_required: true
          data_sharing_agreements: true
          adequacy_decisions: true
          
        deletion:
          automated_deletion: true
          secure_deletion: true
          verification_required: true
      
      # Retention Policies
      retention_policies:
        user_profiles:
          retention_period: "7 years"
          legal_basis: "contract"
          deletion_triggers:
            - account_closure
            - consent_withdrawal
            - legal_requirement
            
        conversation_data:
          retention_period: "3 years"
          legal_basis: "legitimate_interest"
          deletion_triggers:
            - user_request
            - purpose_fulfilled
            - consent_withdrawal
            
        audit_logs:
          retention_period: "10 years"
          legal_basis: "legal_obligation"
          deletion_triggers:
            - legal_requirement_end
            
        system_logs:
          retention_period: "1 year"
          legal_basis: "legitimate_interest"
          deletion_triggers:
            - security_purpose_fulfilled
            - user_request
      
      # Data Subject Categories
      data_subject_categories:
        employees:
          special_protections: true
          additional_rights: true
          
        customers:
          commercial_relationship: true
          contract_basis: true
          
        prospects:
          consent_basis: true
          marketing_permissions: true
          
        visitors:
          minimal_processing: true
          legitimate_interest: true
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gdpr-compliance-service
  namespace: nexus-compliance
  labels:
    app: gdpr-compliance-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: gdpr-compliance-service
  template:
    metadata:
      labels:
        app: gdpr-compliance-service
    spec:
      serviceAccountName: nexus-compliance
      containers:
      - name: gdpr-service
        image: python:3.11-slim
        ports:
        - name: http
          containerPort: 8080
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: gdpr-db-secrets
              key: database-url
        - name: VAULT_ADDR
          value: "http://vault.nexus-infrastructure:8200"
        - name: VAULT_ROLE
          value: "nexus-compliance"
        command:
        - /bin/bash
        - -c
        - |
          # Install required packages
          pip install fastapi uvicorn sqlalchemy psycopg2-binary pydantic cryptography requests
          
          # Create GDPR compliance service
          cat > /app/gdpr_service.py <<'EOF'
          """
          GDPR Compliance Service for Nexus Architect
          Handles data subject rights requests and compliance monitoring
          """
          
          import os
          import json
          import logging
          from datetime import datetime, timedelta
          from typing import List, Dict, Any, Optional
          from enum import Enum
          
          from fastapi import FastAPI, HTTPException, Depends, BackgroundTasks
          from pydantic import BaseModel, Field
          import requests
          from sqlalchemy import create_engine, Column, String, DateTime, Text, Boolean, Integer
          from sqlalchemy.ext.declarative import declarative_base
          from sqlalchemy.orm import sessionmaker, Session
          
          # Configure logging
          logging.basicConfig(level=logging.INFO)
          logger = logging.getLogger(__name__)
          
          # Database setup
          DATABASE_URL = os.getenv("DATABASE_URL")
          engine = create_engine(DATABASE_URL)
          SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
          Base = declarative_base()
          
          class RequestType(str, Enum):
              ACCESS = "access"
              RECTIFICATION = "rectification"
              ERASURE = "erasure"
              PORTABILITY = "portability"
              OBJECTION = "objection"
              RESTRICTION = "restriction"
          
          class RequestStatus(str, Enum):
              PENDING = "pending"
              IN_PROGRESS = "in_progress"
              COMPLETED = "completed"
              REJECTED = "rejected"
          
          class DataSubjectRequest(Base):
              __tablename__ = "data_subject_requests"
              
              id = Column(String, primary_key=True)
              user_id = Column(String, index=True)
              request_type = Column(String)
              status = Column(String, default=RequestStatus.PENDING)
              description = Column(Text)
              verification_status = Column(String)
              created_at = Column(DateTime, default=datetime.utcnow)
              updated_at = Column(DateTime, default=datetime.utcnow)
              completed_at = Column(DateTime)
              response_data = Column(Text)
          
          class ComplianceAudit(Base):
              __tablename__ = "compliance_audits"
              
              id = Column(String, primary_key=True)
              audit_type = Column(String)
              status = Column(String)
              findings = Column(Text)
              recommendations = Column(Text)
              created_at = Column(DateTime, default=datetime.utcnow)
              completed_at = Column(DateTime)
          
          class DataProcessingRecord(Base):
              __tablename__ = "data_processing_records"
              
              id = Column(String, primary_key=True)
              controller_name = Column(String)
              processor_name = Column(String)
              purpose = Column(String)
              legal_basis = Column(String)
              data_categories = Column(Text)
              data_subjects = Column(Text)
              recipients = Column(Text)
              retention_period = Column(String)
              security_measures = Column(Text)
              created_at = Column(DateTime, default=datetime.utcnow)
              updated_at = Column(DateTime, default=datetime.utcnow)
          
          # Create tables
          Base.metadata.create_all(bind=engine)
          
          # FastAPI app
          app = FastAPI(
              title="GDPR Compliance Service",
              description="Data subject rights and compliance management",
              version="1.0.0"
          )
          
          # Pydantic models
          class DataSubjectRequestCreate(BaseModel):
              user_id: str
              request_type: RequestType
              description: Optional[str] = None
          
          class DataSubjectRequestResponse(BaseModel):
              id: str
              user_id: str
              request_type: str
              status: str
              description: Optional[str]
              created_at: datetime
              updated_at: datetime
              completed_at: Optional[datetime]
          
          class DataAccessResponse(BaseModel):
              user_data: Dict[str, Any]
              processing_activities: List[Dict[str, Any]]
              retention_periods: Dict[str, str]
              third_party_sharing: List[Dict[str, Any]]
          
          # Database dependency
          def get_db():
              db = SessionLocal()
              try:
                  yield db
              finally:
                  db.close()
          
          # Vault integration
          def get_vault_token():
              """Get Vault token using Kubernetes auth"""
              try:
                  with open('/var/run/secrets/kubernetes.io/serviceaccount/token', 'r') as f:
                      jwt_token = f.read()
                  
                  vault_url = os.getenv("VAULT_ADDR")
                  role = os.getenv("VAULT_ROLE")
                  
                  response = requests.post(
                      f"{vault_url}/v1/auth/kubernetes/login",
                      json={
                          "role": role,
                          "jwt": jwt_token
                      }
                  )
                  response.raise_for_status()
                  return response.json()["auth"]["client_token"]
              except Exception as e:
                  logger.error(f"Failed to get Vault token: {e}")
                  return None
          
          def encrypt_data(data: str, key_name: str) -> str:
              """Encrypt data using Vault transit engine"""
              try:
                  vault_token = get_vault_token()
                  if not vault_token:
                      return data
                  
                  vault_url = os.getenv("VAULT_ADDR")
                  response = requests.post(
                      f"{vault_url}/v1/transit/encrypt/{key_name}",
                      headers={"X-Vault-Token": vault_token},
                      json={"plaintext": data}
                  )
                  response.raise_for_status()
                  return response.json()["data"]["ciphertext"]
              except Exception as e:
                  logger.error(f"Failed to encrypt data: {e}")
                  return data
          
          def decrypt_data(ciphertext: str, key_name: str) -> str:
              """Decrypt data using Vault transit engine"""
              try:
                  vault_token = get_vault_token()
                  if not vault_token:
                      return ciphertext
                  
                  vault_url = os.getenv("VAULT_ADDR")
                  response = requests.post(
                      f"{vault_url}/v1/transit/decrypt/{key_name}",
                      headers={"X-Vault-Token": vault_token},
                      json={"ciphertext": ciphertext}
                  )
                  response.raise_for_status()
                  return response.json()["data"]["plaintext"]
              except Exception as e:
                  logger.error(f"Failed to decrypt data: {e}")
                  return ciphertext
          
          # GDPR Service Functions
          async def process_access_request(user_id: str, db: Session) -> Dict[str, Any]:
              """Process data subject access request"""
              try:
                  # Collect user data from all systems
                  user_data = {
                      "profile": await get_user_profile(user_id),
                      "conversations": await get_user_conversations(user_id),
                      "audit_logs": await get_user_audit_logs(user_id),
                      "preferences": await get_user_preferences(user_id)
                  }
                  
                  # Get processing activities
                  processing_activities = await get_processing_activities(user_id)
                  
                  # Get retention periods
                  retention_periods = {
                      "profile": "7 years",
                      "conversations": "3 years",
                      "audit_logs": "10 years",
                      "preferences": "Until account deletion"
                  }
                  
                  # Get third-party sharing information
                  third_party_sharing = await get_third_party_sharing(user_id)
                  
                  return {
                      "user_data": user_data,
                      "processing_activities": processing_activities,
                      "retention_periods": retention_periods,
                      "third_party_sharing": third_party_sharing
                  }
              except Exception as e:
                  logger.error(f"Failed to process access request: {e}")
                  raise HTTPException(status_code=500, detail="Failed to process access request")
          
          async def process_erasure_request(user_id: str, db: Session) -> bool:
              """Process data subject erasure request"""
              try:
                  # Check for legal obligations that prevent erasure
                  legal_holds = await check_legal_holds(user_id)
                  if legal_holds:
                      return False
                  
                  # Delete user data from all systems
                  await delete_user_profile(user_id)
                  await delete_user_conversations(user_id)
                  await anonymize_audit_logs(user_id)
                  await delete_user_preferences(user_id)
                  
                  # Log the erasure
                  await log_data_erasure(user_id)
                  
                  return True
              except Exception as e:
                  logger.error(f"Failed to process erasure request: {e}")
                  return False
          
          async def process_portability_request(user_id: str, format: str = "json") -> Dict[str, Any]:
              """Process data portability request"""
              try:
                  # Get portable data
                  portable_data = {
                      "profile": await get_user_profile(user_id),
                      "conversations": await get_user_conversations(user_id),
                      "preferences": await get_user_preferences(user_id)
                  }
                  
                  # Format data according to request
                  if format == "json":
                      return portable_data
                  elif format == "csv":
                      return await convert_to_csv(portable_data)
                  elif format == "xml":
                      return await convert_to_xml(portable_data)
                  else:
                      return portable_data
              except Exception as e:
                  logger.error(f"Failed to process portability request: {e}")
                  raise HTTPException(status_code=500, detail="Failed to process portability request")
          
          # Placeholder functions for data operations
          async def get_user_profile(user_id: str) -> Dict[str, Any]:
              return {"user_id": user_id, "name": "User Name", "email": "user@example.com"}
          
          async def get_user_conversations(user_id: str) -> List[Dict[str, Any]]:
              return [{"id": "conv1", "messages": ["Hello", "Hi there"]}]
          
          async def get_user_audit_logs(user_id: str) -> List[Dict[str, Any]]:
              return [{"timestamp": datetime.utcnow().isoformat(), "action": "login"}]
          
          async def get_user_preferences(user_id: str) -> Dict[str, Any]:
              return {"theme": "dark", "notifications": True}
          
          async def get_processing_activities(user_id: str) -> List[Dict[str, Any]]:
              return [{"activity": "Profile management", "purpose": "Service provision"}]
          
          async def get_third_party_sharing(user_id: str) -> List[Dict[str, Any]]:
              return [{"recipient": "AI Service Provider", "purpose": "AI processing"}]
          
          async def check_legal_holds(user_id: str) -> List[str]:
              return []  # No legal holds
          
          async def delete_user_profile(user_id: str):
              pass  # Implement actual deletion
          
          async def delete_user_conversations(user_id: str):
              pass  # Implement actual deletion
          
          async def anonymize_audit_logs(user_id: str):
              pass  # Implement anonymization
          
          async def delete_user_preferences(user_id: str):
              pass  # Implement actual deletion
          
          async def log_data_erasure(user_id: str):
              pass  # Log the erasure event
          
          async def convert_to_csv(data: Dict[str, Any]) -> str:
              return "CSV format not implemented"
          
          async def convert_to_xml(data: Dict[str, Any]) -> str:
              return "XML format not implemented"
          
          # API Endpoints
          @app.post("/api/v1/gdpr/requests", response_model=DataSubjectRequestResponse)
          async def create_data_subject_request(
              request: DataSubjectRequestCreate,
              background_tasks: BackgroundTasks,
              db: Session = Depends(get_db)
          ):
              """Create a new data subject request"""
              
              # Create request record
              request_id = f"req_{int(datetime.utcnow().timestamp())}"
              db_request = DataSubjectRequest(
                  id=request_id,
                  user_id=request.user_id,
                  request_type=request.request_type,
                  description=request.description,
                  verification_status="pending"
              )
              db.add(db_request)
              db.commit()
              db.refresh(db_request)
              
              # Process request in background
              background_tasks.add_task(process_request, request_id, db_request.request_type, db_request.user_id)
              
              return DataSubjectRequestResponse(
                  id=db_request.id,
                  user_id=db_request.user_id,
                  request_type=db_request.request_type,
                  status=db_request.status,
                  description=db_request.description,
                  created_at=db_request.created_at,
                  updated_at=db_request.updated_at,
                  completed_at=db_request.completed_at
              )
          
          @app.get("/api/v1/gdpr/requests/{request_id}", response_model=DataSubjectRequestResponse)
          async def get_data_subject_request(request_id: str, db: Session = Depends(get_db)):
              """Get data subject request status"""
              
              db_request = db.query(DataSubjectRequest).filter(DataSubjectRequest.id == request_id).first()
              if not db_request:
                  raise HTTPException(status_code=404, detail="Request not found")
              
              return DataSubjectRequestResponse(
                  id=db_request.id,
                  user_id=db_request.user_id,
                  request_type=db_request.request_type,
                  status=db_request.status,
                  description=db_request.description,
                  created_at=db_request.created_at,
                  updated_at=db_request.updated_at,
                  completed_at=db_request.completed_at
              )
          
          @app.get("/api/v1/gdpr/requests/{request_id}/data")
          async def get_request_data(request_id: str, db: Session = Depends(get_db)):
              """Get the data for a completed request"""
              
              db_request = db.query(DataSubjectRequest).filter(DataSubjectRequest.id == request_id).first()
              if not db_request:
                  raise HTTPException(status_code=404, detail="Request not found")
              
              if db_request.status != RequestStatus.COMPLETED:
                  raise HTTPException(status_code=400, detail="Request not completed")
              
              if db_request.response_data:
                  return json.loads(decrypt_data(db_request.response_data, "nexus-compliance"))
              else:
                  raise HTTPException(status_code=404, detail="No data available")
          
          async def process_request(request_id: str, request_type: str, user_id: str):
              """Background task to process data subject requests"""
              db = SessionLocal()
              try:
                  # Update status to in progress
                  db_request = db.query(DataSubjectRequest).filter(DataSubjectRequest.id == request_id).first()
                  db_request.status = RequestStatus.IN_PROGRESS
                  db_request.updated_at = datetime.utcnow()
                  db.commit()
                  
                  # Process based on request type
                  if request_type == RequestType.ACCESS:
                      response_data = await process_access_request(user_id, db)
                  elif request_type == RequestType.ERASURE:
                      response_data = {"deleted": await process_erasure_request(user_id, db)}
                  elif request_type == RequestType.PORTABILITY:
                      response_data = await process_portability_request(user_id)
                  else:
                      response_data = {"message": "Request type not implemented"}
                  
                  # Encrypt and store response data
                  encrypted_data = encrypt_data(json.dumps(response_data), "nexus-compliance")
                  
                  # Update request as completed
                  db_request.status = RequestStatus.COMPLETED
                  db_request.response_data = encrypted_data
                  db_request.completed_at = datetime.utcnow()
                  db_request.updated_at = datetime.utcnow()
                  db.commit()
                  
              except Exception as e:
                  logger.error(f"Failed to process request {request_id}: {e}")
                  db_request.status = RequestStatus.REJECTED
                  db_request.updated_at = datetime.utcnow()
                  db.commit()
              finally:
                  db.close()
          
          @app.get("/health")
          async def health_check():
              return {"status": "healthy", "service": "gdpr-compliance"}
          
          if __name__ == "__main__":
              import uvicorn
              uvicorn.run(app, host="0.0.0.0", port=8080)
          EOF
          
          # Start the service
          cd /app && python gdpr_service.py
        volumeMounts:
        - name: vault-secrets
          mountPath: /vault/secrets
          readOnly: true
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: vault-secrets
        secret:
          secretName: vault-secrets
---
apiVersion: v1
kind: Service
metadata:
  name: gdpr-compliance-service
  namespace: nexus-compliance
spec:
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  selector:
    app: gdpr-compliance-service
---
apiVersion: v1
kind: Secret
metadata:
  name: gdpr-db-secrets
  namespace: nexus-compliance
type: Opaque
data:
  database-url: cG9zdGdyZXNxbDovL25leHVzOk5leHVzREIyMDI0QHBvc3RncmVzcWwtcHJpbWFyeS5uZXh1cy1pbmZyYXN0cnVjdHVyZTo1NDMyL25leHVz

