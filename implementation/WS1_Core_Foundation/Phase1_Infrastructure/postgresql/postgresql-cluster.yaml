# Nexus Architect - PostgreSQL Cluster Configuration
# WS1 Phase 1: Database Foundation with High Availability

apiVersion: v1
kind: Namespace
metadata:
  name: nexus-architect
  labels:
    name: nexus-architect

---
apiVersion: v1
kind: Secret
metadata:
  name: postgresql-credentials
  namespace: nexus-architect
type: Opaque
data:
  # postgres / nexus_admin_2024!
  username: cG9zdGdyZXM=
  password: bmV4dXNfYWRtaW5fMjAyNCE=
  replication-username: cmVwbGljYXRvcg==
  replication-password: cmVwbF9wYXNzXzIwMjQh

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-config
  namespace: nexus-architect
data:
  postgresql.conf: |
    # Nexus Architect PostgreSQL Configuration
    # Optimized for AI workloads and high availability
    
    # Connection Settings
    listen_addresses = '*'
    port = 5432
    max_connections = 200
    superuser_reserved_connections = 3
    
    # Memory Settings
    shared_buffers = 256MB
    effective_cache_size = 1GB
    work_mem = 4MB
    maintenance_work_mem = 64MB
    
    # WAL Settings for Replication
    wal_level = replica
    max_wal_senders = 3
    max_replication_slots = 3
    wal_keep_size = 1GB
    
    # Checkpoint Settings
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    
    # Query Planner
    random_page_cost = 1.1
    effective_io_concurrency = 200
    
    # Logging
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_rotation_age = 1d
    log_rotation_size = 100MB
    log_min_duration_statement = 1000
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
    log_statement = 'ddl'
    
    # Security
    ssl = on
    ssl_cert_file = '/var/lib/postgresql/server.crt'
    ssl_key_file = '/var/lib/postgresql/server.key'
    
  pg_hba.conf: |
    # Nexus Architect PostgreSQL Host-Based Authentication
    
    # TYPE  DATABASE        USER            ADDRESS                 METHOD
    local   all             postgres                                peer
    local   all             all                                     md5
    host    all             all             127.0.0.1/32            md5
    host    all             all             ::1/128                 md5
    host    all             all             10.244.0.0/16           md5
    host    replication     replicator      10.244.0.0/16           md5
    
  init-nexus-db.sql: |
    -- Nexus Architect Database Initialization
    
    -- Create application database
    CREATE DATABASE nexus_architect;
    
    -- Create application user
    CREATE USER nexus_app WITH ENCRYPTED PASSWORD 'nexus_app_pass_2024!';
    
    -- Grant privileges
    GRANT ALL PRIVILEGES ON DATABASE nexus_architect TO nexus_app;
    
    -- Connect to nexus_architect database
    \c nexus_architect;
    
    -- Create schemas
    CREATE SCHEMA IF NOT EXISTS auth;
    CREATE SCHEMA IF NOT EXISTS core;
    CREATE SCHEMA IF NOT EXISTS ai;
    CREATE SCHEMA IF NOT EXISTS audit;
    
    -- Grant schema privileges
    GRANT ALL ON SCHEMA auth TO nexus_app;
    GRANT ALL ON SCHEMA core TO nexus_app;
    GRANT ALL ON SCHEMA ai TO nexus_app;
    GRANT ALL ON SCHEMA audit TO nexus_app;
    
    -- Create initial tables
    
    -- Users table
    CREATE TABLE auth.users (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        email VARCHAR(255) UNIQUE NOT NULL,
        username VARCHAR(100) UNIQUE NOT NULL,
        password_hash VARCHAR(255) NOT NULL,
        first_name VARCHAR(100),
        last_name VARCHAR(100),
        role VARCHAR(50) DEFAULT 'user',
        is_active BOOLEAN DEFAULT true,
        email_verified BOOLEAN DEFAULT false,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        last_login TIMESTAMP WITH TIME ZONE
    );
    
    -- Organizations table
    CREATE TABLE core.organizations (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        name VARCHAR(255) NOT NULL,
        domain VARCHAR(255),
        settings JSONB DEFAULT '{}',
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    );
    
    -- User organizations relationship
    CREATE TABLE auth.user_organizations (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
        organization_id UUID REFERENCES core.organizations(id) ON DELETE CASCADE,
        role VARCHAR(50) DEFAULT 'member',
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        UNIQUE(user_id, organization_id)
    );
    
    -- AI conversations table
    CREATE TABLE ai.conversations (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
        organization_id UUID REFERENCES core.organizations(id) ON DELETE CASCADE,
        title VARCHAR(255),
        persona VARCHAR(50) DEFAULT 'general',
        context JSONB DEFAULT '{}',
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    );
    
    -- AI messages table
    CREATE TABLE ai.messages (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        conversation_id UUID REFERENCES ai.conversations(id) ON DELETE CASCADE,
        role VARCHAR(20) NOT NULL, -- 'user', 'assistant', 'system'
        content TEXT NOT NULL,
        metadata JSONB DEFAULT '{}',
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    );
    
    -- Audit log table
    CREATE TABLE audit.activity_log (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        user_id UUID REFERENCES auth.users(id),
        organization_id UUID REFERENCES core.organizations(id),
        action VARCHAR(100) NOT NULL,
        resource_type VARCHAR(100),
        resource_id UUID,
        details JSONB DEFAULT '{}',
        ip_address INET,
        user_agent TEXT,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    );
    
    -- Create indexes for performance
    CREATE INDEX idx_users_email ON auth.users(email);
    CREATE INDEX idx_users_username ON auth.users(username);
    CREATE INDEX idx_users_active ON auth.users(is_active);
    CREATE INDEX idx_conversations_user ON ai.conversations(user_id);
    CREATE INDEX idx_conversations_org ON ai.conversations(organization_id);
    CREATE INDEX idx_messages_conversation ON ai.messages(conversation_id);
    CREATE INDEX idx_messages_created ON ai.messages(created_at);
    CREATE INDEX idx_audit_user ON audit.activity_log(user_id);
    CREATE INDEX idx_audit_created ON audit.activity_log(created_at);
    
    -- Create updated_at trigger function
    CREATE OR REPLACE FUNCTION update_updated_at_column()
    RETURNS TRIGGER AS $$
    BEGIN
        NEW.updated_at = NOW();
        RETURN NEW;
    END;
    $$ language 'plpgsql';
    
    -- Apply updated_at triggers
    CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON auth.users FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
    CREATE TRIGGER update_organizations_updated_at BEFORE UPDATE ON core.organizations FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
    CREATE TRIGGER update_conversations_updated_at BEFORE UPDATE ON ai.conversations FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql-primary
  namespace: nexus-architect
  labels:
    app: postgresql
    role: primary
spec:
  serviceName: postgresql-primary
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
      role: primary
  template:
    metadata:
      labels:
        app: postgresql
        role: primary
        tier: database
    spec:
      securityContext:
        fsGroup: 999
      containers:
      - name: postgresql
        image: postgres:15.5
        ports:
        - containerPort: 5432
          name: postgresql
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgresql-credentials
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-credentials
              key: password
        - name: POSTGRES_DB
          value: postgres
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgresql-data
          mountPath: /var/lib/postgresql/data
        - name: postgresql-config
          mountPath: /etc/postgresql
        - name: postgresql-init
          mountPath: /docker-entrypoint-initdb.d
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
      volumes:
      - name: postgresql-config
        configMap:
          name: postgresql-config
          items:
          - key: postgresql.conf
            path: postgresql.conf
          - key: pg_hba.conf
            path: pg_hba.conf
      - name: postgresql-init
        configMap:
          name: postgresql-config
          items:
          - key: init-nexus-db.sql
            path: init-nexus-db.sql
  volumeClaimTemplates:
  - metadata:
      name: postgresql-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 20Gi

---
apiVersion: v1
kind: Service
metadata:
  name: postgresql-primary
  namespace: nexus-architect
  labels:
    app: postgresql
    role: primary
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    name: postgresql
  selector:
    app: postgresql
    role: primary

---
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  namespace: nexus-architect
  labels:
    app: postgresql
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    name: postgresql
  selector:
    app: postgresql

